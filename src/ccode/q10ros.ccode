
//ROS OPERATORS:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM4 =  new ROSAM("D6_l_suppkey.ros", 1);
	Operator* lp_ROS4 = new IntDataSource(lp_AM4, false, true);
	( (DataSource*) lp_ROS4)->setPredicate(new Predicate((Predicate::PredicateType) 2));
	( (DataSource*) lp_ROS4)->changeRHSBinding(42);
//COPY:
	Operator* lp_ROS3 = new BCopyOperator(lp_ROS4,  0, 8);
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM5 = new ROSAM("D6_l_extendedprice.ros", 1);
	Operator* lp_ROS5 = new IntDataSource(lp_AM5, false, true);
	((DataSource*) lp_ROS5)->setPositionFilter(lp_ROS3, 0);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM7 = new ROSAM("D6_l_linenumber.ros", 1);
	Operator* lp_ROS7 = new IntDataSource(lp_AM7, false, true);
	((DataSource*) lp_ROS7)->setPositionFilter(lp_ROS3, 1);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM9 = new ROSAM("D6_l_orderkey.ros", 1);
	Operator* lp_ROS9 = new IntDataSource(lp_AM9, false, true);
	((DataSource*) lp_ROS9)->setPositionFilter(lp_ROS3, 2);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM11 = new ROSAM("D6_l_partkey.ros", 1);
	Operator* lp_ROS11 = new IntDataSource(lp_AM11, false, true);
	((DataSource*) lp_ROS11)->setPositionFilter(lp_ROS3, 3);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM13 = new ROSAM("D6_l_quantity.ros", 1);
	Operator* lp_ROS13 = new IntDataSource(lp_AM13, false, true);
	((DataSource*) lp_ROS13)->setPositionFilter(lp_ROS3, 4);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM15 = new ROSAM("D6_l_returnflag.ros", 1);
	Operator* lp_ROS15 = new IntDataSource(lp_AM15, false, true);
	((DataSource*) lp_ROS15)->setPositionFilter(lp_ROS3, 5);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM17 = new ROSAM("D6_l_shipdate.ros", 2);
	Operator* lp_ROS17 = new RLEDataSource(lp_AM17, true);
	((DataSource*) lp_ROS17)->setPositionFilter(lp_ROS3, 6);

//ROS OPERATORS:
//PROJECT:
//SELECT:
	// This should probably be taking the projection, but I don't
	//seem to need it now that column names are unique
	ROSAM* lp_AM19 = new ROSAM("D6_l_suppkey.ros", 1);
	Operator* lp_ROS19 = new IntDataSource(lp_AM19, false, true);
	((DataSource*) lp_ROS19)->setPositionFilter(lp_ROS3, 7);

//OUPUT THE RESULTS:
	Operator* srcs[8] = {lp_ROS5, lp_ROS7, lp_ROS9, lp_ROS11, lp_ROS13, lp_ROS15, lp_ROS17, lp_ROS19};
	int numColumns[8] = {1, 1, 1, 1, 1, 1, 1, 1};
	BlockPrinter* bPrint = new BlockPrinter(srcs, numColumns, 8, "QueryX.out");
	bPrint->printColumns();
